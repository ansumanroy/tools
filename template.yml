AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  TAGNAME:
    Description: Tag Name
    Type: String
    Default: DevOps
  VpcId:
    Description: VpcId
    Type: AWS::EC2::VPC::Id
    Default: vpc-07adbe5fddd009a70
  SubnetId:
    Description: SubnetId
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0f1c3bfae47fbe661
  SubnetIds:
    Description: List of subnets in the provided VPC
    Type: List<AWS::EC2::Subnet::Id>
  myKeyPair:
    Description: Enter the Key Pair Name
    Type: AWS::EC2::KeyPair::KeyName
    Default: myNewKP1

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-09479453c5cde9639
    # ap-southeast-2:
    #   AMI: ami-08589eca6dcc9b39c

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - !Ref LoadBalancerSG
      Subnets: !Ref SubnetIds

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs: 
        - !Ref TargetGroup
  
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
              git: []
          files:
            /var/www/html/index.php:
              content: !Sub |
               <?php print "Hello World from Cloud Init"; ?>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      KeyName: !Ref myKeyPair
      InstanceType: t2.micro
      ImageId: 
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      UserData:
        'Fn::Base64':
          !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
          cd /var/www/html/
          cp -R ../icons .
          mkdir repository
          cd repository
          git clone https://github.com/ansumanroy/DummyRepository.git
          cd DummyRepository
          git fetch --all
          git branch -r > ../remoteBranches.txt
          cd ../
          cp DummyRepository/executeBranchingStrategy.sh .
          chmod +x executeBranchingStrategy.sh
          ./executeBranchingStrategy.sh remoteBranches.txt



      SecurityGroups: 
        - !Ref EC2SecurityGroup


  # MyEC2Instance1:
  #   Type: "AWS::EC2::Instance"
  #   Metadata:
  #     AWS::CloudFormation::Init:
  #       config:
  #         packages:
  #           yum:
  #             httpd: []
  #             php: []
  #         files:
  #           /var/www/html/index.php:
  #             content: !Sub |
  #              <?php print "Hello World from Cloud Init"; ?>
  #         services:
  #           sysvinit:
  #             httpd:
  #               enabled: true
  #               ensureRunning: true
  #   Properties:
  #     InstanceType: t2.micro
  #     KeyName: !Ref myKeyPair
  #     ImageId: 
  #       Fn::FindInMap:
  #       - RegionMap
  #       - !Ref AWS::Region
  #       - AMI
  #     UserData:
  #       'Fn::Base64':
  #         !Sub |
  #         #!/bin/bash -xe
  #         yum install -y aws-cfn-bootstrap
  #         /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyEC2Instance1 --region ${AWS::Region}
      
  #     Tags:
  #       - Key: Name
  #         Value: !Join
  #           - ""
  #           - - !Ref TAGNAME
  #             - !Ref AWS::Region
  #     SecurityGroupIds: 
  #       - !Ref MySecurityGroup
  #       - !Ref ServerSecurityGroupBySG
  #     SubnetId: !Ref SubnetId    
    
  # MyS3Bucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     AccessControl: PublicRead
  #     BucketName: wowhelloworldbucket1
  #     WebsiteConfiguration:
  #       IndexDocument: index.html

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 and 80
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join [" ",[EC2, Instance, with, fn, Join]]

  # ServerSecurityGroupBySG:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: allow connections from specified source security group
  #     VpcId: !Ref VpcId
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: 80
  #       ToPort: 80
  #       CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: Name
  #         Value: !Ref TAGNAME

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow connections from specified source security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref TAGNAME
  
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Instance
      
  
  Ec2InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        !GetAtt
        - LoadBalancerSG
        - GroupId
      GroupId:
        !GetAtt
        - EC2SecurityGroup
        - GroupId

  EC2InboundSSHRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
      # SourceSecurityGroupId:
      #   !GetAtt
      #   - LoadBalancerSG
      #   - GroupId
      GroupId:
        !GetAtt
        - EC2SecurityGroup
        - GroupId


Outputs:
  Website:
    Description: The Public DNS Name of the LoadBalancer
    Value: !Sub 'http://${LoadBalancer.DNSName}'
  

